generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id          Int      @id @default(autoincrement())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdById String
    createdBy   User     @relation(fields: [createdById], references: [id])

    @@index([name])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    posts         Post[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Substation {
    id                     String                @id @default(cuid())
    name                   String                @unique
    abbreviation           String                @unique
    area                   Area
    stationType            StationType
    busArrangement         BusArrangement
    isTemporary            Boolean
    isUnmanned             Boolean
    addressId              String
    deedNumber             String
    voltageLevel           VoltageLevel
    lineBayCount           Int
    transformerBayCount    Int
    feederCount            Int
    communicationTopology  CommunicationTopology
    demolitionCost         Float
    electricalCost         Float
    civilCost              Float
    securityCost           Float
    totalCost              Float
    latitude               Float                 @default(0)
    longitude              Float                 @default(0)
    approvalDate           DateTime
    isVerified             Boolean               @default(false)
    createdAt              DateTime              @default(now())
    updatedAt              DateTime              @updatedAt
    scannedDocumentUrl     String                @default("")
    isAddedBay             Boolean               @default(false)
    newLineBayCount        Int                   @default(0)
    newTransformerBayCount Int                   @default(0)
    isRenovated            Boolean               @default(false)
}

model Chat {
    id String @id @default(cuid())

    incomingMessage String
    outgoingMessage String

    score Float @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum CommunicationTopology {
    CSCS
    SCPS
    TOPO1
    TOPO2
}

enum Area {
    C1
    C2
    C3
    N1
    N2
    N3
    NE1
    NE2
    NE3
    S1
    S2
    S3
}

enum StationType {
    ConventionalOutdoor
    MTSOutdoor
    GISIndoor
    MTSIndoor
}

enum BusArrangement {
    MainAndTransfer
    HConfiguration
    DoubleBusSingleBreaker
    BreakerAndAHalf
}

enum VoltageLevel {
    kV11522
    kV11533
    kV115
    kV22
    kV33
}
