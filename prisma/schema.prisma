// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Substation {
    id String @id @default(cuid())

    name         String @unique
    abbreviation String @unique

    area Area

    stationType StationType

    busArrangement BusArrangement

    isTemporary Boolean
    isUnmanned  Boolean

    addressId String

    deedNumber String

    voltageLevel VoltageLevel

    lineBayCount        Int
    transformerBayCount Int
    feederCount         Int

    communicationTopology CommunicationTopology

    demolitionCost Float
    electricalCost Float
    civilCost      Float
    securityCost   Float
    totalCost      Float

    latitude  Float @default(0)
    longitude Float @default(0)

    approvalDate DateTime

    scannedDocumentUrl String  @default("")
    isVerified         Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum CommunicationTopology {
    CSCS
    SCPS
    TOPO1
    TOPO2
}

enum Area {
    C1
    C2
    C3
    N1
    N2
    N3
    NE1
    NE2
    NE3
    S1
    S2
    S3
}

enum StationType {
    ConventionalOutdoor
    MTSOutdoor
    GISIndoor
    MTSIndoor
}

enum BusArrangement {
    MainAndTransfer
    HConfiguration
    DoubleBusSingleBreaker
    BreakerAndAHalf
}

enum VoltageLevel {
    kV11522
    kV11533
    kV115
    kV22
    kV33
}
